---
# tasks file for hyperauth
- name: Hyperauth | Install Pre-Packages
  yum:
    name: "{{ item }}"
    state: present
    update_cache: True
  with_items:
    - java-1.8.0-openjdk-devel.x86_64
  when:
    - not is_this_offline 


- name: Hyperauth | Create addon dir
  file:
    path: "{{ kube_config_dir }}/addons/hyperauth"
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Hyperauth | Generate Manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/hyperauth/{{ item.file }}"
  with_items:
    - { name: initialization, file: 1.initialization.yml }
      # - { name: hyperauth_deployment, file: 2.hyperauth_deployment.yml }
    - { name: tmax-realm-export, file: 3.tmax-realm-export.json }
    - { name: kafka_init, file: 4.kafka_init.yml }
    - { name: kafka_deployment, file: 5.kafka_deployment.yml }
    - { name: hyperauth_service_monitor, file: 6.hyperauth_service_monitor.yml }
    - { name: generateCerts, file: generateCerts.sh }
    - { name: kafka-manager, file: kafka-manager.yml }
  register: hyperauth_manifests
  when: 
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Hyperauth | Apply 1.initialization.yml
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/hyperauth/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "1.initialization.yml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
  
- name: Hyperauth | SSL Settings for Hyperauth Server & K8s Api server
  ansible.builtin.shell: | 
    {{ bin_dir }}/kubectl get secret hyperauth-https-secret -n hyperauth -o jsonpath="{['data']['tls\.crt']}" | base64 -d > /etc/kubernetes/ssl/hyperauth.crt
    {{ bin_dir }}/kubectl get secret hyperauth-https-secret -n hyperauth -o jsonpath="{['data']['ca\.crt']}" | base64 -d > /etc/kubernetes/ssl/hypercloud-root-ca.crt
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
  ignore_errors: yes
  

- name: Register db_addr variable 
  ansible.builtin.shell: "{{ bin_dir }}/kubectl describe service postgresql -n hyperauth | grep 'IP:' | cut -d ':' -f 2 | tr -d ' '"
  register: db_addr
  ignore_errors: true

- name: Hyperauth | Generate Manifests for Hyperauth Deployment
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/hyperauth/{{ item.file }}"
  with_items:
    - { name: hyperauth_deployment, file: 2.hyperauth_deployment.yml }
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Hyperauth | Apply 2.hyperauth_deployment
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/hyperauth/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "2.hyperauth_deployment.yml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
    

- name: Hyperauth | Register hyperauth clusterIP
  ansible.builtin.shell: "{{ bin_dir }}/kubectl describe svc hyperauth -n hyperauth | grep IP: | cut -d ':' -f2 | tr -d ' '" 
  register: hyperauth_cluster_ip


- name: Hyperauth | Wait for Hyperauth Pod become available
  uri: 
    url: http://{{ hyperauth_cluster_ip.stdout }}:8080/auth/realms/master/protocol/openid-connect/certs
    return_content: yes
  register: hyperauth_status
  retries: 400
  delay: 5
  until: "hyperauth_status.status == 200"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
      

- name: Hyperauth | Fetch SSL File from master1
  run_once: yes
  fetch: src=/etc/kubernetes/ssl/{{ item }} dest=./inventory/mycluster/ flat=yes
  with_items:
    - hyperauth.crt
    - hypercloud-root-ca.crt
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Hyperauth | Cpoy SSL File to All Master /etc/kubernetes/ssl
  copy: src=./inventory/mycluster/{{ item }} dest=/etc/kubernetes/ssl/
  with_items:
    - hyperauth.crt
    - hypercloud-root-ca.crt
  when:
    - inventory_hostname in groups['kube_control_plane']

- name: Hyperauth | Apply 4.kafka_init, 5.kakfa_deployment.yml
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/hyperauth/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "4.kafka_init.yml"
    - "5.kafka_deployment.yml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Hyperauth | Check that the OIDC settings Already Registered
  shell: cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep oidc
  register: oidc_registered_result
  failed_when: >
    (oidc_registered_result.stderr != '') or
    (oidc_registered_result.rc == 1)
  ignore_errors: yes
  
- name: Hyperauth | Generate Binary - yq
  ansible.builtin.copy:
    src: "templates/{{ item.file }}"
    dest: "{{ kube_config_dir }}/"
    owner: "root"
    group: "root"
    mode: '0755'
  with_items:
    - { name: "yq_linux_amd64", file: "yq_linux_amd64" }
  when: 
    - inventory_hostname in groups['kube_control_plane']

- name: Hyperauth | OIDC with k8s
  ansible.builtin.shell: |
    # sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.11.1/yq_linux_amd64
    sudo cp ./yq_linux_amd64 /usr/bin/yq
    sudo chmod +x /usr/bin/yq
    sudo cp /etc/kubernetes/manifests/kube-apiserver.yaml .
    # export port=`{{ bin_dir }}/kubectl describe service hyperauth -n hyperauth | grep 'NodePort' | grep -v 'https' | grep 'http' | cut -d '/' -f1 | cut -d 'p' -f2 | tr -d ' '`
    yq e '.spec.containers[0].command += "--oidc-issuer-url=https://hyperauth.{{ custom_domain_name }}/auth/realms/tmax"' -i ./kube-apiserver.yaml
    yq e '.spec.containers[0].command += "--oidc-client-id=hypercloud5"' -i ./kube-apiserver.yaml
    yq e '.spec.containers[0].command += "--oidc-username-claim=preferred_username"' -i ./kube-apiserver.yaml
    yq e '.spec.containers[0].command += "--oidc-username-prefix=-"' -i ./kube-apiserver.yaml
    yq e '.spec.containers[0].command += "--oidc-groups-claim=group"' -i ./kube-apiserver.yaml
    yq e '.spec.containers[0].command += "--oidc-ca-file=/etc/kubernetes/ssl/hypercloud-root-ca.crt"' -i ./kube-apiserver.yaml
    mv -f ./kube-apiserver.yaml /etc/kubernetes/manifests/kube-apiserver.yaml
  args:
    chdir: "{{ kube_config_dir }}"
  when:
    - inventory_hostname in groups['kube_control_plane']
    - oidc_registered_result.failed
  ignore_errors: yes







