# tasks file for install Template operator and Template service broker
- name: Template-service-broker | Create addon dir
  file:
    path: "{{ kube_config_dir }}/addons/template-service-broker"
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Template-service-broker | Generate CRDs
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/template-service-broker/{{ item.file }}"
  with_items:
    - { name: clustertemplates, file: tmax.io_clustertemplates.yaml }
    - { name: templates, file: tmax.io_templates.yaml }
    - { name: templateinstances, file: tmax.io_templateinstances.yaml }
    - { name: clustertemplateclaims, file: tmax.io_clustertemplateclaims.yaml }
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Template-service-broker | Apply CRDs
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "tmax.io_clustertemplates.yaml"
    - "tmax.io_templates.yaml"
    - "tmax.io_templateinstances.yaml"
    - "tmax.io_clustertemplateclaims.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Template-operator | Generate Manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/template-service-broker/{{ item.file }}"
  with_items:
    - { name: namespace, file: template_namespace.yaml }
    - { name: rbac, file: template_operator_deploy_rbac.yaml }
    - { name: template-operator-deployment, file: template_operator_deploy_manager.yaml }
  when:    
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Template-operator | Create namespace
  kube: 
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "template_namespace.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Template-operator | Apply operator deploy
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "template_operator_deploy_rbac.yaml"
    - "template_operator_deploy_manager.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
   
    
- name: Cluster-tsb | Generate Manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/template-service-broker/{{ item.file }}"
  with_items:
    - { name: cluster-tsb-namespace, file: cluster_tsb_namespace.yaml }
    - { name: cluster-tsb-serviceaccount, file: cluster_tsb_serviceaccount.yaml }
    - { name: cluster-tsb-role, file: cluster_tsb_role.yaml }
    - { name: cluster-tsb-rolebinding, file: cluster_tsb_rolebinding.yaml }
    - { name: cluster-tsb-service, file: cluster_tsb_service.yaml }
    - { name: cluster-tsb-deployment, file: cluster_tsb_deployment.yaml }
    - { name: cluster-tsb-service-broker, file: cluster_tsb_service_broker.yaml }
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Cluster-tsb | Create namespace
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "cluster_tsb_namespace.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Cluster-tsb | Apply manifests
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "cluster_tsb_serviceaccount.yaml"
    - "cluster_tsb_role.yaml"
    - "cluster_tsb_rolebinding.yaml"
    - "cluster_tsb_deployment.yaml"
    - "cluster_tsb_service.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Cluster-tsb | Wait for Cluster-tsb Pod become available
  uri:
    url: http://{{ hostvars[groups['kube_control_plane'][0]]['ansible_host'] }}:32323/v2/catalog
    return_content: yes
  register: cluster_tsb_status
  retries: 400
  delay: 5
  until: "cluster_tsb_status.status == 200"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Cluster-tsb | Apply Cluster-TSB
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "cluster_tsb_service_broker.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Namespaced-tsb | Generate Manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/template-service-broker/{{ item.file }}"
  with_items:
    - { name: tsb-namespace, file: tsb_namespace.yaml }
    - { name: tsb-serviceaccount, file: tsb_serviceaccount.yaml }
    - { name: tsb-role, file: tsb_role.yaml }
    - { name: tsb-rolebinding, file: tsb_rolebinding.yaml }
    - { name: tsb-service, file: tsb_service.yaml }
    - { name: tsb-deployment, file: tsb_deployment.yaml }
    - { name: tsb-service-broker, file: tsb_service_broker.yaml }
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Namespaced-tsb | Create namespace
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "tsb_namespace.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Namespaced-tsb | Apply manifests
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "tsb_serviceaccount.yaml"
    - "tsb_role.yaml"
    - "tsb_rolebinding.yaml"
    - "tsb_deployment.yaml"
    - "tsb_service.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Namespaced-tsb | Wait for Namespaced-tsb Pod become available
  uri:
    url: http://{{ hostvars[groups['kube_control_plane'][0]]['ansible_host'] }}:32324/v2/catalog
    return_content: yes
  register: namespaced_tsb_status
  retries: 400
  delay: 5
  until: "namespaced_tsb_status.status == 200"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]


- name: Namespaced-tsb | Apply Namespaced-TSB
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/template-service-broker/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - "tsb_service_broker.yaml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
