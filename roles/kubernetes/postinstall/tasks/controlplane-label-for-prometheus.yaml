# Add controlplane's label for prometheus
- name: controlplane labeling for prometheus - label | Add k8s-app
  lineinfile:
    firstmatch: yes
    path: '{{ kube_manifest_dir }}/{{ item.name }}.yaml'
    regexp: '{{ item.regexp }}'
    insertafter: 'labels:'
    state: present
    line: '{{ item.line }}'
  loop: 
  - { name: 'etcd', regexp: 'k8s-app: etcd', line: '    k8s-app: etcd' }
  - { name: 'kube-controller-manager', regexp: 'k8s-app: kube-controller-manager', line: '    k8s-app: kube-controller-manager' }
  - { name: 'kube-scheduler', regexp: 'k8s-app: kube-scheduler', line: '    k8s-app: kube-scheduler' }

# Restart controlplane crio/containerd
- name: controlplane labeling for prometheus - label | restart controlplane crio/containerd
  shell: "{{ bin_dir }}/crictl pods --name {{ item }} -q | xargs -I% --no-run-if-empty bash -c '{{ bin_dir }}/crictl stopp % && {{ bin_dir }}/crictl rmp %'"
  register: remove_container
  retries: 10
  until: remove_container.rc == 0
  delay: 1
  when:
    - container_manager in ['crio', 'containerd']
    - inventory_hostname in groups['kube_control_plane']
  loop:
  - 'etcd'
  - 'kube-controller-manager' 
  - 'kube-scheduler'

# Waiting for the controlplane component to be running
- name: controlplane labeling for prometheus - label | wait for the controlplane to be running
  uri:
    url: "{{ item }}"
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 60
  delay: 1
  loop:
  - '{{ etcd_health_check_url }}'
  - '{{ kube_controller_manager_health_check_url }}'
  - '{{ kube_scheduler_health_check_url }}'
