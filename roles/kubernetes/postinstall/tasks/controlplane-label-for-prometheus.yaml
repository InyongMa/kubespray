# Add etcd's label for prometheus
- name: Etcd - label | Add k8s-app=etcd
  lineinfile:
    firstmatch: yes
    path: '{{ kube_manifest_dir }}/etcd.yaml'
    regexp: 'k8s-app: etcd'
    insertafter: 'labels:'
    state: present
    line: '    kube-app: etcd'

# Restart etcd crio/containerd
- name: Etcd - command | restart etcd crio/containerd
  shell: "{{ bin_dir }}/crictl pods --name etcd -q | xargs -I% --no-run-if-empty bash -c '{{ bin_dir }}/crictl stopp % && {{ bin_dir }}/crictl rmp %'"
  register: remove_etcd_container
  retries: 10
  until: remove_etcd_container.rc == 0
  delay: 1
  when:
    - container_manager in ['crio', 'containerd']
    - inventory_hostname in groups['kube_control_plane']

# Add kube-controller-manager's label for prometheus
- name: kube-controller-manager - label | Add k8s-app=kube-controller-manager
  lineinfile:
    firstmatch: yes
    path: '{{ kube_manifest_dir }}/kube-controller-manager.yaml'
    regexp: 'k8s-app: kube-controller-manager'
    insertafter: 'labels:'
    state: present
    line: '    kube-app: kube-controller-manager'

# Restart kube-controller-manager crio/containerd
- name: kube-controller-manager - command | restart kube-controller-manager crio/containerd
  shell: "{{ bin_dir }}/crictl pods --name kube-controller-manager -q | xargs -I% --no-run-if-empty bash -c '{{ bin_dir }}/crictl stopp % && {{ bin_dir }}/crictl rmp %'"
  register: remove_kube_controller_manager_container
  retries: 10
  until: remove_kube_controller_manager_container.rc == 0
  delay: 1
  when:
    - container_manager in ['crio', 'containerd']
    - inventory_hostname in groups['kube_control_plane']
               
# Add kube-scheduler's label for prometheus
- name: kube-scheduler - label | Add k8s-app=kube-scheduler
  lineinfile:
    firstmatch: yes
    path: '{{ kube_manifest_dir }}/kube-scheduler.yaml'
    regexp: 'k8s-app: kube-scheduler'
    insertafter: 'labels:'
    state: present
    line: '    kube-app: kube-scheduler'

# Restart kube-scheduler crio/containerd
- name: kube-scheduler - command | restart kube-scheduler crio/containerd
  shell: "{{ bin_dir }}/crictl pods --name kube-scheduler -q | xargs -I% --no-run-if-empty bash -c '{{ bin_dir }}/crictl stopp % && {{ bin_dir }}/crictl rmp %'"
  register: remove_kube_scheduler_container
  retries: 10
  until: remove_kube_scheduler_container.rc == 0
  delay: 1
  when:
    - container_manager in ['crio', 'containerd']
    - inventory_hostname in groups['kube_control_plane']
